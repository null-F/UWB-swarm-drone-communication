// Generated by gencpp from file state_msg/form.msg
// DO NOT EDIT!


#ifndef STATE_MSG_MESSAGE_FORM_H
#define STATE_MSG_MESSAGE_FORM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace state_msg
{
template <class ContainerAllocator>
struct form_
{
  typedef form_<ContainerAllocator> Type;

  form_()
    : header()
    , swarm_shape(0)
    , swarm_size(0.0)  {
    }
  form_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , swarm_shape(0)
    , swarm_size(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _swarm_shape_type;
  _swarm_shape_type swarm_shape;

   typedef float _swarm_size_type;
  _swarm_size_type swarm_size;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(One_column)
  #undef One_column
#endif
#if defined(_WIN32) && defined(Triangle)
  #undef Triangle
#endif
#if defined(_WIN32) && defined(Square)
  #undef Square
#endif

  enum {
    One_column = 0u,
    Triangle = 1u,
    Square = 2u,
  };


  typedef boost::shared_ptr< ::state_msg::form_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_msg::form_<ContainerAllocator> const> ConstPtr;

}; // struct form_

typedef ::state_msg::form_<std::allocator<void> > form;

typedef boost::shared_ptr< ::state_msg::form > formPtr;
typedef boost::shared_ptr< ::state_msg::form const> formConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_msg::form_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_msg::form_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_msg::form_<ContainerAllocator1> & lhs, const ::state_msg::form_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.swarm_shape == rhs.swarm_shape &&
    lhs.swarm_size == rhs.swarm_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_msg::form_<ContainerAllocator1> & lhs, const ::state_msg::form_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::state_msg::form_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_msg::form_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_msg::form_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_msg::form_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_msg::form_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_msg::form_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_msg::form_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e27eb7bb8b1540aaf910be84d457203";
  }

  static const char* value(const ::state_msg::form_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e27eb7bb8b1540aULL;
  static const uint64_t static_value2 = 0xaf910be84d457203ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_msg::form_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_msg/form";
  }

  static const char* value(const ::state_msg::form_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_msg::form_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"## 控制参考量 \n"
"uint8 swarm_shape\n"
"\n"
"uint8 One_column=0\n"
"uint8 Triangle=1\n"
"uint8 Square=2\n"
"float32 swarm_size\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::state_msg::form_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_msg::form_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.swarm_shape);
      stream.next(m.swarm_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct form_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_msg::form_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_msg::form_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "swarm_shape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swarm_shape);
    s << indent << "swarm_size: ";
    Printer<float>::stream(s, indent + "  ", v.swarm_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_MSG_MESSAGE_FORM_H
