// Generated by gencpp from file px4_uwb/MultiBsplines.msg
// DO NOT EDIT!


#ifndef PX4_UWB_MESSAGE_MULTIBSPLINES_H
#define PX4_UWB_MESSAGE_MULTIBSPLINES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <px4_uwb/Bspline.h>

namespace px4_uwb
{
template <class ContainerAllocator>
struct MultiBsplines_
{
  typedef MultiBsplines_<ContainerAllocator> Type;

  MultiBsplines_()
    : drone_id_from(0)
    , traj()  {
    }
  MultiBsplines_(const ContainerAllocator& _alloc)
    : drone_id_from(0)
    , traj(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_from_type;
  _drone_id_from_type drone_id_from;

   typedef std::vector< ::px4_uwb::Bspline_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::px4_uwb::Bspline_<ContainerAllocator> >::other >  _traj_type;
  _traj_type traj;





  typedef boost::shared_ptr< ::px4_uwb::MultiBsplines_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_uwb::MultiBsplines_<ContainerAllocator> const> ConstPtr;

}; // struct MultiBsplines_

typedef ::px4_uwb::MultiBsplines_<std::allocator<void> > MultiBsplines;

typedef boost::shared_ptr< ::px4_uwb::MultiBsplines > MultiBsplinesPtr;
typedef boost::shared_ptr< ::px4_uwb::MultiBsplines const> MultiBsplinesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_uwb::MultiBsplines_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_uwb::MultiBsplines_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::px4_uwb::MultiBsplines_<ContainerAllocator1> & lhs, const ::px4_uwb::MultiBsplines_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id_from == rhs.drone_id_from &&
    lhs.traj == rhs.traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::px4_uwb::MultiBsplines_<ContainerAllocator1> & lhs, const ::px4_uwb::MultiBsplines_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace px4_uwb

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_uwb::MultiBsplines_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_uwb::MultiBsplines_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_uwb::MultiBsplines_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f45adafc838893dace82d2af415aae3";
  }

  static const char* value(const ::px4_uwb::MultiBsplines_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f45adafc838893dULL;
  static const uint64_t static_value2 = 0xace82d2af415aae3ULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_uwb/MultiBsplines";
  }

  static const char* value(const ::px4_uwb::MultiBsplines_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 drone_id_from\n"
"\n"
"Bspline[] traj\n"
"================================================================================\n"
"MSG: px4_uwb/Bspline\n"
"int32 drone_id\n"
"\n"
"int32 order\n"
"int64 traj_id\n"
"time start_time\n"
"\n"
"float64[] knots\n"
"geometry_msgs/Point[] pos_pts\n"
"\n"
"float64[] yaw_pts\n"
"float64 yaw_dt\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::px4_uwb::MultiBsplines_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id_from);
      stream.next(m.traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiBsplines_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_uwb::MultiBsplines_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_uwb::MultiBsplines_<ContainerAllocator>& v)
  {
    s << indent << "drone_id_from: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id_from);
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::px4_uwb::Bspline_<ContainerAllocator> >::stream(s, indent + "    ", v.traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_UWB_MESSAGE_MULTIBSPLINES_H
